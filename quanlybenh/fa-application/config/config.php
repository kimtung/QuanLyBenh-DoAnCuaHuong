<?php
defined('BASE_PATH') OR exit('No direct script access allowed');

$config['site_title'] = 'Tra cứu bệnh vật nuôi';
$config['site_email'] = 'huongnguyen.tha@gmail.com';

$config['base_url'] = '';

$config['index_page'] = 'index.php';

$config['charset'] = 'UTF-8';

/**
 *--------------------------------------------------------------------------
 * Config default value for:
 * - module
 * - controller
 * - action
 *--------------------------------------------------------------------------
 */
$config['default_module']       = 'welcome';
$config['default_controller']   = '';
$config['default_action']       = 'index';

/*
|--------------------------------------------------------------------------
| Enable Query Strings
|--------------------------------------------------------------------------
|
| By default Framework Awesome uses search-engine friendly segment based URLs:
| example.com/who/what/where/
|
| By default Framework Awesome enables access to the $_GET array.  If for some
| reason you would like to disable it, set 'allow_get_array' to FALSE.
|
| You can optionally enable standard query string based URLs:
| example.com?who=me&what=something&where=here
|
| Options are: TRUE or FALSE (boolean)
|
| The other items let you set the query string 'words' that will
| invoke your controllers and its functions:
| example.com/index.php?m=module&c=controller&a=action
|
| Please note that some of the helpers won't work as expected when
| this feature is enabled, since Framework Awesome is designed primarily to
| use segment based URLs.
|
*/
$config['url_friendly'] = FALSE;

/*
|--------------------------------------------------------------------------
| URI PROTOCOL
|--------------------------------------------------------------------------
|
| This item determines which server global should be used to retrieve the
| URI string.  The default setting of 'REQUEST_URI' works for most servers.
| If your links do not seem to work, try one of the other delicious flavors:

| 'REQUEST_URI'   Uses $_SERVER['REQUEST_URI']
| 'PATH_INFO'      Uses $_SERVER['PATH_INFO']
|
| WARNING: If you set this to 'PATH_INFO', URIs will always be URL-decoded!
*/
$config['uri_protocol']	= 'REQUEST_URI';

/*
|--------------------------------------------------------------------------
| URL suffix
|--------------------------------------------------------------------------
|
| This option allows you to add a suffix to all URLs generated by Framework Awesome.
| For more information please see the user guide:
|
*/
$config['url_suffix'] = '';

/**
 *--------------------------------------------------------------------------
 * Allowed URL Characters
 *--------------------------------------------------------------------------
 *
 * This lets you specify which characters are permitted within your URLs.
 * When someone tries to submit a URL with disallowed characters they will
 * get a warning message.
 *
 * As a security measure you are STRONGLY encouraged to restrict URLs to
 * as few characters as possible.  By default only these are allowed: a-z 0-9~%.:_-
 *
 * Leave blank to allow all characters -- but only if you are insane.
 *
 * The configured value is actually a regular expression character group
 * and it will be executed as: ! preg_match('/^[<permitted_uri_chars>]+$/i
 *
 * DO NOT CHANGE THIS UNLESS YOU FULLY UNDERSTAND THE REPERCUSSIONS!!
 *
 */
$config['permitted_uri_chars'] = 'a-z 0-9~%.:_\-';


/**
 *--------------------------------------------------------------------------
 * Enable/Disable System Hooks
 *--------------------------------------------------------------------------
 *
 * If you would like to use the 'hooks' feature you must enable it by
 * setting this variable to TRUE (boolean).  See the user guide for details.
 *
 */
$config['enable_hook'] = TRUE;

/**
 *--------------------------------------------------------------------------
 * Class Extension Prefix
 *--------------------------------------------------------------------------
 *
 * This item allows you to set the filename/classname prefix when extending
 * native libraries.
 *
 */
$config['subclass_prefix'] = 'FA_';

/**
 *--------------------------------------------------------------------------
 * Error Views Directory Path
 *--------------------------------------------------------------------------
 *
 * Leave this BLANK unless you would like to set something other than the default
 * fa-application/config/views/errors/ directory.  Use a full server path with trailing slash.
 *
 */
$config['error_views_path'] = '';

/**
 *--------------------------------------------------------------------------
 * Error Logging Directory Path
 *--------------------------------------------------------------------------
 *
 * Leave this BLANK unless you would like to set something other than the default
 * fa-application/logs/ directory. Use a full server path with trailing slash.
 *
 */
$config['log_path'] = '';

/**
 *--------------------------------------------------------------------------
 * Log File Extension
 *--------------------------------------------------------------------------
 *
 * The default filename extension for log files. The default 'php' allows for
 * protecting the log files via basic scripting, when they are to be stored
 * under a publicly accessible directory.
 *
 * Note: Leaving it blank will default to 'php'.
 *
 */
$config['log_file_extension'] = '';

/**
 *--------------------------------------------------------------------------
 * Error Logging Threshold
 *--------------------------------------------------------------------------
 *
 * You can enable error logging by setting a threshold over zero. The
 * threshold determines what gets logged. Threshold options are:
 *
 *	0 = Disables logging, Error logging TURNED OFF
 *	1 = Error Messages (including PHP errors)
 *	2 = Debug Messages
 *	3 = Informational Messages
 *	4 = All Messages
 *
 * You can also pass an array with threshold levels to show individual error types
 *
 * 	array(2) = Debug Messages, without Error Messages
 *
 * For a live site you'll usually only enable Errors (1) to be logged otherwise
 * your log files will fill up very fast.
 *
 */
$config['log_threshold'] = 0;

/**
 *--------------------------------------------------------------------------
 * Log File Permissions
 *--------------------------------------------------------------------------
 *
 * The file system permissions to be applied on newly created log files.
 *
 * IMPORTANT: This MUST be an integer (no quotes) and you MUST use octal
 *            integer notation (i.e. 0700, 0644, etc.)
 */
$config['log_file_permissions'] = 0644;

/**
 *--------------------------------------------------------------------------
 * Date Format for Logs
 *--------------------------------------------------------------------------
 *
 * Each item that is logged has an associated date. You can use PHP date
 * codes to set your own date formatting
 *
 */
$config['log_date_format'] = 'Y-m-d H:i:s';


/**
 *--------------------------------------------------------------------------
 * Standardize newlines
 *--------------------------------------------------------------------------
 *
 * Determines whether to standardize newline characters in input data,
 * meaning to replace \r\n, \r, \n occurrences with the PHP_EOL value.
 *
 * This is particularly useful for portability between UNIX-based OSes,
 * (usually \n) and Windows (\r\n).
 *
 */
$config['standardize_newlines'] = FALSE;

/**
 *--------------------------------------------------------------------------
 * Global XSS Filtering
 *--------------------------------------------------------------------------
 *
 * Determines whether the XSS filter is always active when GET, POST or
 * COOKIE data is encountered
 *
 * WARNING: This feature is DEPRECATED and currently available only
 *          for backwards compatibility purposes!
 *
 */
$config['global_xss_filtering'] = FALSE;

/**
 *--------------------------------------------------------------------------
 * Cross Site Request Forgery
 *--------------------------------------------------------------------------
 * Enables a CSRF cookie token to be set. When set to TRUE, token will be
 * checked on a submitted form. If you are accepting user data, it is strongly
 * recommended CSRF protection be enabled.
 *
 * 'csrf_token_name' = The token name
 * 'csrf_cookie_name' = The cookie name
 * 'csrf_expire' = The number in seconds the token should expire.
 * 'csrf_regenerate' = Regenerate token on every submission
 * 'csrf_exclude_uris' = Array of URIs which ignore CSRF checks
 */
$config['csrf_protection'] = FALSE;
$config['csrf_token_name'] = 'csrf_test_name';
$config['csrf_cookie_name'] = 'csrf_cookie_name';
$config['csrf_expire'] = 7200;
$config['csrf_regenerate'] = TRUE;
$config['csrf_exclude_uris'] = array();

/**
 *--------------------------------------------------------------------------
 * Cookie Related Variables
 *--------------------------------------------------------------------------
 *
 * 'cookie_prefix'   = Set a cookie name prefix if you need to avoid collisions
 * 'cookie_domain'   = Set to .your-domain.com for site-wide cookies
 * 'cookie_path'     = Typically will be a forward slash
 * 'cookie_secure'   = Cookie will only be set if a secure HTTPS connection exists.
 * 'cookie_httponly' = Cookie will only be accessible via HTTP(S) (no javascript)
 *
 * Note: These settings (with the exception of 'cookie_prefix' and
 *       'cookie_httponly') will also affect sessions.
 *
 */
$config['cookie_prefix']	= '';
$config['cookie_domain']	= '';
$config['cookie_path']		= '/';
$config['cookie_secure']	= FALSE;
$config['cookie_httponly'] 	= FALSE;

/**
 *--------------------------------------------------------------------------
 * Reverse Proxy IPs
 *--------------------------------------------------------------------------
 *
 * If your server is behind a reverse proxy, you must whitelist the proxy
 * IP addresses from which CodeIgniter should trust headers such as
 * HTTP_X_FORWARDED_FOR and HTTP_CLIENT_IP in order to properly identify
 * the visitor's IP address.
 *
 * You can use both an array or a comma-separated list of proxy addresses,
 * as well as specifying whole subnets. Here are a few examples:
 *
 * Comma-separated:	'10.0.1.200,192.168.5.0/24'
 * Array:		array('10.0.1.200', '192.168.5.0/24')
 */
$config['proxy_ips'] = '';